#ifndef ALIDEF_H_
#define ALIDEF_H_

//#define ERROR_DESTROY_ENABLE
typedef enum
{
	eCMD_TYPE_SET_CURRENTSOURCE,
	eCMD_TYPE_SET_SUBTITLE,
	eCMD_TYPE_PLAY,
	eCMD_TYPE_PAUSE,
	eCMD_TYPE_STOP,
	eCMD_TYPE_SEEK,
	eCMD_TYPE_CURRENTTIME,
	eCMD_TYPE_TOTALTIME,
	eCMD_TYPE_METADATA,
	eCMD_TYPE_ISSEEKABLE,
	eCMD_TYPE_OPEN, 									   //10
	eCMD_TYPE_CLOSE,
	eCMD_TYPE_EOS,	  //will remove later
	eCMD_TYPE_CHANGE_AUDIO,
	eCMD_TYPE_CHANGE_SUBTITLE,
	eCMD_TYPE_STREAM_NUM,
	eCMD_TYPE_BUFFERING_PAUSE,
	eCMD_TYPE_BUFFERING_RESUME,
	//code added by fang.yang
	eCMD_TYPE_SET_SPDIF,
	//code end
	eCMD_TYPE_SET_SUBTITLE_DISPLAY,
	eCMD_TYPE_SET_SUBTITLE_ENCODING,	//20
	eCMD_TYPE_VMSG, //volatile message
	eCMD_TYPE_DVIEW,
	eCMD_TYPE_BITRATE,
	eCMD_TYPE_POST_DVB_INFO,
	eCMD_TYPE_DISABLE_FLV_SEEK,
	eCMD_TYPE_SET_HTTP_HEADERS,
	eCMD_TYPE_SET_HTTP_PROXY,
	eCMD_TYPE_SET_HTTP_AUTHENTICATION,
	eCMD_TYPE_SET_BRIGHTNESS,
	eCMD_TYPE_SET_CONTRAST, 					   //30
	eCMD_TYPE_SET_HUE,
	eCMD_TYPE_SET_SATURATION,
	eCMD_TYPE_SET_SHARPNESS,
	eCMD_TYPE_SET_VEDIO_ENHANCE_DEFAULT,
	eCMD_TYPE_SET_TS_NUM,
	eCMD_TYPE_VIDEOINFO,
	eCMD_TYPE_VIDEOWIDTH,
	eCMD_TYPE_VIDEOHEIGHT,
	eCMD_TYPE_VIDEOFRAMERATE,
	eCMD_TYPE_VIDEOBITRATE, 					   //40
	eCMD_TYPE_CHANGE_CHANNEL,
	eCMD_TYPE_SET_EIT_DATE,
	eCMD_TYPE_START_RECORD,
	eCMD_TYPE_STOP_RECORD,
	eCMD_TYPE_SET_TV_OUT_MODE,
	eCMD_TYPE_RECORD_FINISHED,
	eCMD_TYPE_DOWNLOADPERCENT,
   eCMD_TYPE_SET_BUFFERING_LOW_PERCENT,
   eCMD_TYPE_SET_BUFFERING_HIGH_PERCENT,
   eCMD_TYPE_SET_MAX_BUFFERING_TIME, //50
   eCMD_TYPE_SET_PLAY_RATE,
	eCMD_TYPE_STREAM_INFO,
	eCMD_TYPE_SET_FULL_SCREEN,
	eCMD_TYPE_DISABLE_USE_SEEK_FOR_TRICK,
	eCMD_TYPE_CHANGE_SUBTITLE_SIZE,
	eCMD_TYPE_CHANGE_SUBTITLE_POSTION,
	eCMD_TYPE_READY,
	eCMD_TYPE_VTYPE,
	eCMD_TYPE_SET_RESOLUTION,
	eCMD_TYPE_CHANGE_RESOLUTION,
	eCMD_TYPE_SET_PLAYREADY_HTTPOPT,
	eCMD_TYPE_SET_PLAYREADY_LICENSESERVER,
	eCMD_TYPE_CUR_STREAM_INFO,
	eCMD_TYPE_SET_VIDEO_DISPLAY,
	eCMD_TYPE_SET_VOLUME,
	eCMD_TYPE_SET_VIDEO_ENABLE,
	eCMD_TYPE_SET_ASPECT_RATIO,
	eCMD_TYPE_SET_ASPECT_CVRS,
	eCMD_TYPE_SET_TIMING_MODE,
	eCMD_TYPE_GET_ASPECT_RATIO,
	eCMD_TYPE_GET_ASPECT_CVRS,
	eCMD_TYPE_GET_TIMING_MODE,
	eCMD_TYPE_GET_DOWNLOAD_SPEED,
	/* DLNA protocol should be set before eCMD_TYPE_SET_CURRENTSOURCE*/
	eCMD_TYPE_SET_DLNA_PROTOCOL,
	eCMD_TYPE_GET_MEDIA_SIZE,
	/* set AES key and Riv value. Only for miracast currently.*/
	eCMD_TYPE_SET_AES_KEY_RIV,
	/* capture a frame. Only for stream player*/
	eCMD_TYPE_SET_FRAME_CAPTURE,
	eCMD_TYPE_MAX
}eCMD_TYPE;

typedef enum
{
	eRESPONSE_TYPE_CURRENTTIME = 100,
	eRESPONSE_TYPE_TOTALTIME,
	eRESPONSE_TYPE_METADATA,
	eRESPONSE_TYPE_ISSEEKABLE,
	eRESPONSE_TYPE_OPEN,
	eRESPONSE_TYPE_CLOSE,
	eRESPONSE_TYPE_STREAM_NUM,
	eRESPONSE_TYPE_FINISHED,
	eRESPONSE_TYPE_METADATA_FINISHED,
	eRESPONSE_TYPE_STATE_CHANGE,
	eRESPONSE_TYPE_BUFFERING,			 //110
	eRESPONSE_TYPE_EOS,
	eRESPONSE_TYPE_CHANGE_AUDIO,
	eRESPONSE_TYPE_CHANGE_SUBTITLE,
	eRESPONSE_TYPE_SET_SUBTITLE,
	eRESPONSE_TYPE_EIT,
	eRESPONSE_TYPE_SDT,
	eRESPONSE_TYPE_NIT,
	eRESPONSE_TYPE_FRONTEND_STATE,
	eRESPONSE_TYPE_PMT,
	eRESPONSE_TYPE_PMT_FINISHED,	//120
	eRESPONSE_TYPE_TS_PROGRAM,
	eRESPONSE_TYPE_SDT_FINISHED,
	eRESPONSE_TYPE_VIDEOINFO,
	eRESPONSE_TYPE_VIDEOWIDTH,
	eRESPONSE_TYPE_VIDEOHEIGHT,
	eRESPONSE_TYPE_VIDEOFRAMERATE,
	eRESPONSE_TYPE_VIDEOBITRATE,
	eRESPONSE_TYPE_TRACK_INFO,
	eRESPONSE_TYPE_PMT_ALL_FINISHED,
	eRESPONSE_TYPE_TDT, 					   //130
	eRESPONSE_TYPE_SUBTITLE_INFO,
	eRESPONSE_TYPE_DOWNLOADPERCENT,
	eRESPONSE_TYPE_START_RECORD,
	eRESPONSE_TYPE_BITRATE,
	eRESPONSE_TYPE_VMSG,
	eRESPONSE_TYPE_STREAM_INFO,
	eRESPONSE_TYPE_PLAY_RATE,
	eRESPONSE_TYPE_READY,
	eRESPONSE_TYPE_VTYPE,
	eRESPONSE_TYPE_RESOLUTION_TYPE,
	eRESPONSE_TYPE_DOWNLOAD_SPEED,
	eRESPONSE_TYPE_DOWNLOAD_POSTION,
	eRESPONSE_TYPE_STREAM_INFO_FINISH,
	eRESPONSE_TYPE_CUR_STREAM_INFO,
	eRESPONSE_TYPE_CUR_STREAM_INFO_FINISH,
	eRESPONSE_TYPE_REDIRECT,
	eRESPONSE_TYPE_VDEC_IS_RENDERING,
	eRESPONSE_TYPE_ASPECT_RATIO,
	eRESPONSE_TYPE_ASPECT_CVRS,
	eRESPONSE_TYPE_TIMING_MODE,
	eRESPONSE_TYPE_SRC_ERROR,
	eRESPONSE_TYPE_GET_MEDIA_SIZE,
	eRESPONSE_TYPE_FRAME_CAPTURE,
	eRESPONSE_TYPE_MAX
}eRESPONSE_TYPE;
typedef enum
{
	STREAM_INFO_AUDIO ,
	STREAM_INFO_SUBTITLE,
	STREAM_INFO_VIDEO
}eSTREAM_INFO;

typedef enum
{
	eMSG_TYPE_CMD = 1,
	eMSG_TYPE_RESPONSE,
	eMSG_TYPE_ERR,
	eMSG_TYPE_WARNING,
	eMSG_TYPE_EOS
}eMSG_TYPE;

typedef enum
{
	eERR_SUB_UNDEFINE,
	eERR_SUB_SOUP_HTTP,
	eERR_SUB_TYPE_NOT_FOUND, //used when the element doesn't know the stream's type.
	eERR_SUB_DEMUX		  //used when demuxing fails.
}eERR_SUB_TYPE;

typedef enum
{
	eWARN_SUB_UNSUPPORT_AUDIO,
	eWARN_SUB_UNSUPPORT_VIDEO,
	eWARN_SUB_DECODE_ERR_AUDIO,
	eWARN_SUB_DECODE_ERR_VIDEO,
	eWARN_SUB_LOADING_BEGIN,
	eWARN_SUB_LOADING_END,
	eWARN_SUB_READ_FAIL,	//for dvbsrc read fail
	eWARN_SUB_TRICK_BOS,
	eWARN_SUB_TRICK_EOS,
	eWARN_SUB_UNSUPPORT_SUBTITLE
}eWARN_SUB_TYPE;
#define MAX_MSG_DATA_SIZE 256
typedef struct
{
	long msgtype;
	char data1[MAX_MSG_DATA_SIZE];
	char data2[MAX_MSG_DATA_SIZE];
	long subtype;
	int val;
}stMSG_QUE;

typedef struct
{
	long msgtype;
	long subtype;
	int val;
	long len;//pplive link can > 256B
	char data[1024];
}stVMSG_QUE;

typedef struct
{
	unsigned int service_id;
	unsigned int event_id;
	unsigned int year;
	unsigned int month;
	unsigned int day;
	unsigned int start_time;
	unsigned int duration;
	char event_name[64];
	char event_text[256];
}stEIT;

typedef struct
{
	unsigned int service_id;
	char service_name[64];
	char service_provider_name[64];
}stSDT;

typedef struct
{
	int status;
	int signal;
	int snr;
	int ber;
	int unc;
	int lock;
} stFRONTEND_STATE;

typedef struct
{
	unsigned int frequency;
	unsigned int bandwidth;
	unsigned int hierarchy;
	unsigned int guard_interval;
	char constellation[10];
	char code_rate_hp[5];
	char code_rate_lp[5];
	char transmission_mode[5];
}stNIT;



#define MSG_SIZE (sizeof(stMSG_QUE) - sizeof(long))
//#define MSG_SIZE_DVBT (sizeof(stMSG_QUE_DVBT) - sizeof(long))
#define EIT_SIZE (sizeof(stEIT))
#define SDT_SIZE (sizeof(stSDT))
#define NIT_SIZE (sizeof(stNIT))
#define FES_SIZE (sizeof(stFRONTEND_STATE))


#define KEY_SERVER 100220
#define KEY_CLIENT 100225
#define KEY_V_CLIENT 100230
//for miracast HDCP content protection system
#define AES_KEY_LEN 16
#define RIV_LEN 8

typedef enum
{
	ePLAYER_STATE_STOP,
	ePLAYER_STATE_PLAY,
	ePLAYER_STATE_PAUSE
}ePLAYER_STATE;

typedef enum
{
	eCHANNEL_STEREO,
	eCHANNEL_MONO_LEFT,
	eCHANNEL_MONO_RIGHT
}eCHANNEL;


#endif

