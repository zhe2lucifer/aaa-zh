/**
<!--
Notice:             This file mainly contains Doxygen-style comments to generate
                    the HTML help file (.chm) provided by ALi Corporation to
                    give ALi Customers a quick support for using ALi AUI API
                    Interface.\n
                    Furthermore, the comments have been wrapped at about 80 bytes
                    in order to avoid the horizontal scrolling when splitting
                    the display in two part for coding, testing, debugging
                    convenience
Current ALi Author: Wendy.He
Last update:        2017.02.25
-->

@file       aui_tsg.h

@brief      Transport Stream Generator (TSG) Module

            <b> Transport Stream Generator (TSG) Module </b> is used to generate
            TS packets and send them to the Transport Stream Switch Interface
            (TSI) Module.

@note       For further details, please refer to the ALi document
            <b><em>
            ALi_AUI_Porting_Guide_Modules.pdf - Chapter "Transport Stream
            Generator (TSG) Module"
            </em></b>

@copyright Copyright &copy; 2015 ALi &reg; Corporation. All Rights Reserved

@htmlonly   <td colspan="2"><h2 class="groupheader">
List of Included Files
</h2></td> @endhtmlonly
*/

#ifndef _AUI_TSG_H

#define _AUI_TSG_H

/*************************Included Header File List***************************/

#include "aui_common.h"

/*******************************Global Type List******************************/

/**
@brief @htmlonly <div class="details">
       Struct of the <b> Transport Stream Generator (TSG) Module </b> to specify
       the attributes available to be configured
       </div> @endhtmlonly

       Struct to specify the attributes available to be configured for TSG Module
*/
typedef struct aui_attr_tsg {

    /**
    Member as @a Index (which integer values are from the value <b> zero (0)
    </b>) for referring to different supported TSG devices, and is used when
    opening TSG Module

    @note   At present, @a only one (1) TSG device is supported, then that
            @a Index can take @a only the value <b> zero (0) </b>
    */
    unsigned char uc_dev_idx;

    /**
    Member to specify the <b> output clock </b> of a TSG device
    */
    unsigned long ul_tsg_clk;

    /**
    Member to specify the <b> bit rate </b> of TS packets generated by a TSG
    device start
    */
    unsigned long ul_bit_rate;

    /**
    Member to specify the <b> address </b> of TS packets

    @note   That address is different for each chipset, furthermore it could
            need an alignment
    */
    unsigned char *ul_addr;

    /**
    Member to specify the <b> quantity </b> of TS packets to be sent
    */
    unsigned long ul_pkg_cnt;

    /**
    Member as a @a flag to specify the <b> synchronization mode </b> of sending
    TSG packets, in particular:
    - @b 1 = <b> Synchronous Mode </b>, i.e. send the TS packets in the buffer
             and wait until the transfer process is complete
    - @b 0 = <b> Asynchronous Mode </b>, i.e. send the TS packets in the buffer
             and do not wait the transfer process is complete
    */
    unsigned char uc_sync_mode;

} aui_attr_tsg, *aui_p_attr_tsg;

/*****************************Global Function List*****************************/

#ifdef __cplusplus

extern "C" {

#endif

/**
@brief        Function used to get the version number of the TSG Module

@param[out]   pul_version        = Pointer to the version number of the TSG
                                   Module

@return       @b AUI_RTN_SUCCESS = Getting of the version number of TSG Module
                                   performed successfully
@return       @b AUI_RTN_EINVAL  = The output parameter (i.e. [out]) is invalid
@return       @b Other_Values    = Getting of the version number of TSG Module
                                   failed for some reason.
*/
AUI_RTN_CODE aui_tsg_version_get (

    unsigned long *pul_version

    );

/**
@brief        Function used to perform the initialization of the TSG Module
              before its opening by the function #aui_tsg_open

@param[in]    call_back_init     = Callback function used for the
                                   initialization of the TSG Module, as per
                                   comment for the function pointer #p_fun_cb
@param[in]    pv_param           = Input parameter of the callback function
                                   @b call_back_init.

@return       @b AUI_RTN_SUCCESS = Initializing of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = At least one input parameter (i.e. [in])
                                   is invalid
@return       @b Other_Values    = Initializing of the TSG Module performed
                                   successfully failed for some reason

@note         Both the input parameters @b call_back_init and @b param can
              be set as NULL
 */
AUI_RTN_CODE aui_tsg_init (

    p_fun_cb call_back_init,

    void *pv_param

    );

/**
@brief        Function used to perform the de-initialization of the TSG Module
              after its closing by the function #aui_tsg_close

@warning      This function is @a reserved to ALi R&D Dept for both <b> TDS OS
              </b> and <b> Linux OS </b>

@param[in]    call_back_init     = Callback function used to de-initialize the
                                   TSG Module, as per comment for the function
                                   pointer #p_fun_cb
@param[in]    pv_param           = Input parameter of the callback function
                                   @b call_back_init

@return       @b AUI_RTN_SUCCESS = De-initializing of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = At least one input parameter (i.e. [in])
                                   is invalid
@return       @b Other_Values    = De-initializing of the TSG Module failed for
                                   some reason

@note         Both the input parameters @b call_back_init and @b param can be
              set as NULL
*/
AUI_RTN_CODE aui_tsg_de_init (

    p_fun_cb call_back_init,

    void *pv_param

    );

/**
@brief        Function used to configure the desired attributes of TSG module
              and open it, then get the related handle

@param[in]    p_attr             = Pointer to a struct #aui_attr_tsg, which
                                   collects the desired attributes for the
                                   TSG Module to be opened, in particular to
                                   the members
                                   - @b ul_tsg_clk, to calculate the TSG Clock
                                     Rate as <b> 200MHz / (2 * ul_tsg_clk) </b>
                                   - @b uc_dev_idx
@param[out]   p_handle           = #aui_hdl pointer to the handle of the TSG
                                   Module just opened

@return       @b AUI_RTN_SUCCESS = Opening of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = At least one parameter (i.e. [in], [out]) is
                                   invalid
@return       @b Other_Values    = Opening of the TSG Module failed for some
                                   reason
 */
AUI_RTN_CODE aui_tsg_open (

    const aui_attr_tsg *p_attr,

    aui_hdl* const p_handle

    );

/**
@brief        Function used to close the TSG device already opened by the
              function #aui_tsg_open

@param[in]    handle             = #aui_hdl handle of TSG module already opened
                                   and to be closed

@return       @b AUI_RTN_SUCCESS = Closing of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = The input parameter (i.e. [in]) is invalid
@return       @b Other_Values    = Closing of the TSG module failed for some
                                   reasons
*/
AUI_RTN_CODE aui_tsg_close (

    aui_hdl handle

    );

/**
@brief        Function used to start the TSG Module already opened by the
              function #aui_tsg_open

@param[in]    handle             = #aui_hdl handle of the TSG Module already
                                   opened and to be started
@param[in]    p_attr             = Pointer to a struct #aui_attr_tsg, which
                                   collects the desired attributes for the TSG
                                   Module to be started, in particular to the
                                   member @b ul_bit_rate

@return       @b AUI_RTN_SUCCESS = Starting of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = The input parameter (i.e. [in]) is invalid
@return       @b Other_Values    = Starting of the TSG Module failed for some
                                   reasons
*/
AUI_RTN_CODE aui_tsg_start (

    aui_hdl handle,

    const aui_attr_tsg *p_attr

    );

/**
@brief        Function used to stop the TSG Module already opened and started
              by, respectively, the functions #aui_tsg_open and #aui_tsg_start

@param[in]    handle             = #aui_hdl handle of the TSG Module already
                                   opened and started then to be stopped
@param[in]    p_attr             = Pointer to a struct #aui_attr_tsg, which
                                   collects the desired attributes for the
                                   TSG Module to be stopped
                                   - @b Caution: At present this parameter is
                                        @a reserved for future use

@return       @b AUI_RTN_SUCCESS = Stopping of the TSG Module performed
                                   successfully
@return       @b AUI_RTN_EINVAL  = At least one input parameter (i.e. [in]) is
                                   invalid
@return       @b Other_Values    = Stopping of the TSG Module failed for some
                                   reasons
 */
AUI_RTN_CODE aui_tsg_stop (

    aui_hdl handle,

    const aui_attr_tsg *p_attr

    );


/**
@brief        Function used to send the TS packets from TSG buffer to the TSI
              device

@param[in]    handle             = #aui_hdl handle of the TSG Module to be
                                   managed to send TS packets
@param[in]    p_attr             = Pointer to a struct #aui_attr_tsg, which
                                   collects the desired attributes for the TSG
                                   Module to be opened, in particular to the
                                   members
                                   - @b ul_addr
                                   - @b ul_pkt_cnt
                                   - @b uc_sync_mode

@return       @b AUI_RTN_SUCCESS = Sending of the TS packets from TSG buffer to
                                   the TSI device performed successfully
@return       @b AUI_RTN_EINVAL  = At least one input parameter (i.e. [in]) is
                                   invalid
@return       @b Other_Values    = Sending of the TS packets from TSG buffer to
                                   the TSI device failed for some reason
*/
AUI_RTN_CODE aui_tsg_send (

    aui_hdl handle,

    const aui_attr_tsg *p_attr

    );

/**
@brief        Function used to check continuously the status of the TSG buffer

@param[in]    handle             = #aui_hdl handle of the TSG Module to be
                                   managed to check continuously the status of
                                   the TSG buffer
@param[in]    ul_buffer          = Buffer address to be checked continuously
@param[in]    ul_pkt_cnt         = Buffer length (as number of TS packets)

@return       @b AUI_RTN_SUCCESS = Continuous checking of the buffer status
                                   performed successfully
@return       @b AUI_RTN_EINVAL  = At least one input parameter (i.e. [in])
                                   is invalid
@return       @b Other_Values    = Continuous checking of the buffer status
                                   failed for some reason
 */
AUI_RTN_CODE aui_tsg_check_buf_status (

    aui_hdl handle,

    unsigned long ul_buffer,

    unsigned long ul_pkt_cnt

    );

/**
@brief        Function used to check the number of remaining TS packets in the
              TSG buffer

@param[in]    handle             = #aui_hdl handle of the TSG Module to be
                                   managed to check the number of remaining TS
                                   packets in the buffer
@param[out]   pul_pkt_cnt        = Pointer to the number of remaining TS packets
                                   in the TSG buffer

@return       @b AUI_RTN_SUCCESS = Checking of the number of remaining TS packets
                                   in the buffer performed successfully
@return       @b AUI_RTN_EINVAL  = At least one parameter (i.e. [in], [out]) is
                                   invalid
@return       @b Other_Values    = Checking of the number of remaining TS packets
                                   in the buffer failed for some reason
 */
AUI_RTN_CODE aui_tsg_check_remain_pkt (

    aui_hdl handle,

    unsigned long *pul_pkt_cnt

    );

#ifdef __cplusplus

}

#endif

#endif

/* END OF FILE */

